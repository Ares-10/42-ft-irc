# ft_irc 테스트 명령어 시나리오

이 문서는 ft_irc 서버를 테스트하기 위한 구체적인 명령어 시나리오를 제공합니다. 각 테스트 케이스에는 클라이언트가 보낼 명령어와 예상되는 서버 응답이 포함되어 있습니다.

## 서버 시작
```bash
./ircserv 6667 password
```

## 테스트 시나리오 1: 기본 연결 및 인증

### 테스트 1.1: 올바른 연결 및 인증
```
# 클라이언트 1 입력
PASS password
NICK user1
USER user1 0 * :User One

# 예상 응답
:server 001 user1 :Welcome to the IRC Network user1!user1@<클라이언트IP>
```

### 테스트 1.2: 잘못된 비밀번호
```
# 클라이언트 2 입력
PASS wrongpassword
NICK user2
USER user2 0 * :User Two

# 예상 응답
:server 464 * :Password incorrect
# 연결 종료
```

### 테스트 1.3: 이미 사용 중인 닉네임
```
# 클라이언트 3 입력 (클라이언트 1이 이미 user1을 사용 중일 때)
PASS password
NICK user1
USER user3 0 * :User Three

# 예상 응답
:server 433 * user1 :Nickname is already in use
```

### 테스트 1.4: 인증 명령어 순서 변경
```
# 클라이언트 4 입력
NICK user4
PASS password
USER user4 0 * :User Four

# 예상 응답 - 서버 구현에 따라 다를 수 있음
# 정상적으로 연결되거나 오류 메시지 출력
```

## 테스트 시나리오 2: 채널 생성 및 참여

### 테스트 2.1: 채널 생성
```
# 클라이언트 1 입력
JOIN #channel1

# 예상 응답
:user1!user1@<IP> JOIN #channel1
:server 353 user1 = #channel1 :@user1
:server 366 user1 #channel1 :End of /NAMES list.
```

### 테스트 2.2: 기존 채널 참여
```
# 클라이언트 2 입력 (클라이언트 1이 이미 #channel1을 만든 상태)
PASS password
NICK user2
USER user2 0 * :User Two
JOIN #channel1

# 예상 응답
:user2!user2@<IP> JOIN #channel1
:server 353 user2 = #channel1 :@user1 user2
:server 366 user2 #channel1 :End of /NAMES list.
```

### 테스트 2.3: 비밀번호 있는 채널 생성
```
# 클라이언트 1 입력
JOIN #secretchannel password123

# 예상 응답
:user1!user1@<IP> JOIN #secretchannel
:server 353 user1 = #secretchannel :@user1
:server 366 user1 #secretchannel :End of /NAMES list.

# 모드 설정 확인
MODE #secretchannel

# 예상 응답
:server 324 user1 #secretchannel +k password123
```

### 테스트 2.4: 잘못된 비밀번호로 채널 참여 시도
```
# 클라이언트 2 입력
JOIN #secretchannel wrongpassword

# 예상 응답
:server 475 user2 #secretchannel :Cannot join channel (+k) - bad key
```

### 테스트 2.5: 여러 채널 동시 참여
```
# 클라이언트 1 입력
JOIN #channel2,#channel3

# 예상 응답
:user1!user1@<IP> JOIN #channel2
:server 353 user1 = #channel2 :@user1
:server 366 user1 #channel2 :End of /NAMES list.
:user1!user1@<IP> JOIN #channel3
:server 353 user1 = #channel3 :@user1
:server 366 user1 #channel3 :End of /NAMES list.
```

## 테스트 시나리오 3: 채널 모드 설정

### 테스트 3.1: 비밀 채널 설정
```
# 클라이언트 1 입력 (#channel1의 운영자인 상태)
MODE #channel1 +k channelpass

# 예상 응답
:user1!user1@<IP> MODE #channel1 +k channelpass
```

### 테스트 3.2: 초대 전용 채널 설정
```
# 클라이언트 1 입력
MODE #channel1 +i

# 예상 응답
:user1!user1@<IP> MODE #channel1 +i
```

### 테스트 3.3: 사용자 제한 설정
```
# 클라이언트 1 입력
MODE #channel1 +l 5

# 예상 응답
:user1!user1@<IP> MODE #channel1 +l 5
```

### 테스트 3.4: 채널 운영자 지정
```
# 클라이언트 1 입력 (user2가 이미 채널에 있는 상태)
MODE #channel1 +o user2

# 예상 응답
:user1!user1@<IP> MODE #channel1 +o user2
```

### 테스트 3.5: 권한 없이 모드 변경 시도
```
# 클라이언트 3 입력 (운영자가 아닌 상태)
PASS password
NICK user3
USER user3 0 * :User Three
JOIN #channel1 channelpass
MODE #channel1 -k

# 예상 응답
:server 482 user3 #channel1 :You're not channel operator
```

## 테스트 시나리오 4: 메시지 전송

### 테스트 4.1: 채널 메시지 전송
```
# 클라이언트 1 입력 (#channel1에 있는 상태)
PRIVMSG #channel1 :Hello everyone!

# 모든 채널 멤버에게 전송되는 예상 응답
:user1!user1@<IP> PRIVMSG #channel1 :Hello everyone!
```

### 테스트 4.2: 개인 메시지 전송
```
# 클라이언트 1 입력 (user2가 온라인인 상태)
PRIVMSG user2 :Hi there, private message!

# user2에게만 전송되는 예상 응답
:user1!user1@<IP> PRIVMSG user2 :Hi there, private message!
```

### 테스트 4.3: 존재하지 않는 대상에게 메시지 전송
```
# 클라이언트 1 입력
PRIVMSG #nonexistent :Hello!
PRIVMSG nonexistentuser :Hello!

# 예상 응답
:server 403 user1 #nonexistent :No such channel
:server 401 user1 nonexistentuser :No such nick/channel
```

### 테스트 4.4: 특수 문자가 포함된 메시지
```
# 클라이언트 1 입력
PRIVMSG #channel1 :Special chars: !@#$%^&*()_+{}|:"<>?~`-=[]\\;',./

# 예상 응답 - 모든 특수 문자가 제대로 전송되는지 확인
:user1!user1@<IP> PRIVMSG #channel1 :Special chars: !@#$%^&*()_+{}|:"<>?~`-=[]\\;',./
```

## 테스트 시나리오 5: 채널 운영

### 테스트 5.1: 채널 주제 설정
```
# 클라이언트 1 입력 (채널 운영자인 상태)
TOPIC #channel1 :This is the new channel topic

# 예상 응답
:user1!user1@<IP> TOPIC #channel1 :This is the new channel topic
```

### 테스트 5.2: 채널 주제 확인
```
# 클라이언트 2 입력
TOPIC #channel1

# 예상 응답
:server 332 user2 #channel1 :This is the new channel topic
:server 333 user2 #channel1 user1!user1@<IP> <timestamp>
```

### 테스트 5.3: 사용자 초대
```
# 클라이언트 1 입력 (초대 전용 채널의 운영자인 상태)
INVITE user3 #channel1

# 예상 응답
:server 341 user1 user3 #channel1
# user3에게 전송되는 메시지
:user1!user1@<IP> INVITE user3 :#channel1
```

### 테스트 5.4: 사용자 추방
```
# 클라이언트 1 입력 (채널 운영자인 상태)
KICK #channel1 user3 :Reason for kick

# 예상 응답
:user1!user1@<IP> KICK #channel1 user3 :Reason for kick
```

### 테스트 5.5: 채널 나가기
```
# 클라이언트 2 입력
PART #channel1 :Leaving this channel

# 예상 응답
:user2!user2@<IP> PART #channel1 :Leaving this channel
```

## 테스트 시나리오 6: 연결 종료

### 테스트 6.1: QUIT 명령어로 연결 종료
```
# 클라이언트 1 입력
QUIT :Goodbye!

# 모든 공통 채널 멤버에게 전송되는 예상 응답
:user1!user1@<IP> QUIT :Goodbye!
# 연결 종료
```

## 테스트 시나리오 7: 복합 시나리오 (스크립트 형태)

### 테스트 7.1: 종합 테스트 시나리오
```bash
#!/bin/bash

SERVER="localhost"
PORT="6667"
PASSWORD="password"

# 클라이언트 1
(
echo "PASS $PASSWORD"
echo "NICK user1"
echo "USER user1 0 * :User One"
sleep 1
echo "JOIN #testchannel"
sleep 1
echo "MODE #testchannel +k secret"
sleep 1
echo "PRIVMSG #testchannel :Hello from user1"
sleep 5  # 다른 사용자의 응답을 기다림
echo "TOPIC #testchannel :This is a test channel"
sleep 1
echo "MODE #testchannel +o user2"  # user2에게 운영자 권한 부여
sleep 5
echo "PRIVMSG user2 :Hello user2, this is a private message"
sleep 10
echo "QUIT :Goodbye!"
) | nc $SERVER $PORT &

sleep 2  # 첫 번째 클라이언트가 채널을 생성할 시간을 줌

# 클라이언트 2
(
echo "PASS $PASSWORD"
echo "NICK user2"
echo "USER user2 0 * :User Two"
sleep 1
echo "JOIN #testchannel secret"  # 비밀번호 제공
sleep 1
echo "PRIVMSG #testchannel :Hello everyone from user2"
sleep 2
echo "PRIVMSG user1 :Got your message!"
sleep 10
echo "KICK #testchannel user3 :Testing kick command"
sleep 2
echo "QUIT :Leaving now"
) | nc $SERVER $PORT &

sleep 3  # 두 번째 클라이언트가 채널에 참여할 시간을 줌

# 클라이언트 3
(
echo "PASS $PASSWORD"
echo "NICK user3"
echo "USER user3 0 * :User Three"
sleep 1
echo "JOIN #testchannel secret"
sleep 1
echo "PRIVMSG #testchannel :Hello from user3"
sleep 5
echo "PART #testchannel :Testing part command"
sleep 2
echo "QUIT :Goodbye all"
) | nc $SERVER $PORT &

# 클라이언트 4 (잘못된 비밀번호로 채널 참여 시도)
(
echo "PASS $PASSWORD"
echo "NICK user4"
echo "USER user4 0 * :User Four"
sleep 1
echo "JOIN #testchannel wrongpassword"
sleep 1
echo "QUIT :Leaving after failed join attempt"
) | nc $SERVER $PORT &

wait
```

## 테스트 시나리오 8: 에러 처리

### 테스트 8.1: 잘못된 명령어 형식
```
# 클라이언트 1 입력
PRIVMSG  # 파라미터 누락

# 예상 응답
:server 461 user1 PRIVMSG :Not enough parameters
```

### 테스트 8.2: 존재하지 않는 명령어
```
# 클라이언트 1 입력
NONEXISTENTCOMMAND

# 예상 응답
:server 421 user1 NONEXISTENTCOMMAND :Unknown command
```

### 테스트 8.3: 권한이 없는 명령어 사용
```
# 일반 사용자가 OPER 명령어 사용 시도
OPER user1 wrongpassword

# 예상 응답
:server 464 user1 :Password incorrect
```

## 9. 추가 테스트 케이스

### 9.1: 채널 목록 요청
```
# 클라이언트 입력
LIST

# 예상 응답
:server 321 user1 Channel :Users  Name
:server 322 user1 #channel1 2 :This is the new channel topic
:server 322 user1 #channel2 1 :
# 기타 채널 정보
:server 323 user1 :End of LIST
```

### 9.2: WHO 명령어
```
# 클라이언트 입력
WHO #channel1

# 예상 응답
:server 352 user1 #channel1 user1 <host> <server> user1 H@ :0 User One
:server 352 user1 #channel1 user2 <host> <server> user2 H :0 User Two
:server 315 user1 #channel1 :End of WHO list
```

### 9.3: WHOIS 명령어
```
# 클라이언트 입력
WHOIS user2

# 예상 응답
:server 311 user1 user2 user2 <host> * :User Two
:server 319 user1 user2 :#channel1
:server 312 user1 user2 <server> :IRC Server
:server 318 user1 user2 :End of WHOIS list
```

### 9.4: 다중 명령어 테스트
```
# 여러 명령어를 한 번에 보내기
PRIVMSG #channel1 :First message
PRIVMSG #channel1 :Second message
PRIVMSG user2 :Private message

# 각 명령어에 대한 응답이 순차적으로 도착해야 함
```

### 9.5: 긴 메시지 테스트
```
# 512바이트에 가까운 긴 메시지 전송
PRIVMSG #channel1 :Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

# 메시지가 잘리거나 여러 부분으로 나뉘어 전송될 수 있음
```